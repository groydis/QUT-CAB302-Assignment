package Delivery;

import java.util.ArrayList;
import java.util.List;

import Stock.Item;
import Stock.Stock;

/**
 * This class processes an inventory into a manifest (A collection of trucks.)
 * It does this by optimising manifests for capital expenditure by minimizing the quantity of low temperature 
 * trucks through an optimal logistical allocation of items.
 * 
 * @author Greyden Scott
 *
 */

public class Manifest {
	
	List<Truck> fleet;
	
	Stock storeInventory;
	
	Stock coldItems = new Stock();
	Stock ordinaryItems = new Stock();
	
	Stock cargo = new Stock();
	
	/**
	 * Constructs the manifest based on the inventory of items passed through
	 * 
	 * @param storeInventory A Stock of all items to be loaded on to the trucks
	 */
	
	public Manifest(Stock storeInventory) {
		
		this.storeInventory = storeInventory;
		this.fleet = new ArrayList<>();
		boolean fillingUpTruck = false;

		// Sort the inventory to order by Temperature - Lowest (coldest) to higher (warmest).
		this.storeInventory.sortByTemp();
		
		// Iterate through inventory, storing cold items and ordinary items in to separate lists.
		for (Item item : storeInventory.getItems()) {
			if(item.getStorageTemp() <= 10) {
				coldItems.addItem(item);	
			} else {
				ordinaryItems.addItem(item);	
			}
		}
		
		// Store cold items into a cargo, once 800 items are in the cargo
		// Create a truck and add it to the fleet
		for (Item item : coldItems.getItems()) {
			cargo.addItem(item);
			if (cargo.getTotal() == 800) {
				Truck coldTruck = new RefrigeratedTruck(cargo);
				fleet.add(coldTruck);
				cargo = new Stock();
			}
		}
		
		
		// Once all cold items are on trucks, if any room remains in the last truck's cargo
		// Add ordinary items to fill trucks cargo capacity
		// Then create a new ordinary truck and complete loading inventory into cargo and creating
		// trucks.
		if (cargo.getTotal() != 800) {
			fillingUpTruck = true;
			for (Item item : ordinaryItems.getItems()) {
			
				if (fillingUpTruck) {
					cargo.addItem(item);
					if (cargo.getTotal() == 800) {
						Truck coldTruck = new RefrigeratedTruck(cargo);
						fleet.add(coldTruck);
						cargo = new Stock();
						fillingUpTruck = false;
					}
				} else {
					cargo.addItem(item);
					if (cargo.getTotal() == 1000) {
						Truck ordinaryTruck = new OrdinaryTruck(cargo);
						fleet.add(ordinaryTruck);
						cargo = new Stock();
					}
				}
			}
		}
		
		// Check to see if cargo has not hit limit
		// Put last of cargo on to a truck.
		if (cargo.getTotal() != 1000) {
			Truck ordinaryTruck = new OrdinaryTruck(cargo);
			fleet.add(ordinaryTruck);
		}

	}
	
	/**
	 * Returns the fleet generated by the constructor
	 * 
	 * @return List of Trucks generated by the constructor.
	 */
	public List<Truck> getFleet() {
		return this.fleet;
	}

}
